# The configurations that used for the recording, feel free to edit them
config:

  # Specify a command to be executed
  # like `/bin/bash -l`, `ls`, or any other commands
  # the default is bash for Linux
  # or powershell.exe for Windows
  command: bash -l
  
  # Specify the current working directory path
  # the default is the current working directory path
  cwd: /tmp
  
  # Export additional ENV variables
  env:
    recording: true
  
  # Explicitly set the number of columns
  # or use `auto` to take the current
  # number of columns of your shell
  cols: 160
  
  # Explicitly set the number of rows
  # or use `auto` to take the current
  # number of rows of your shell
  rows: 29
  
  # Amount of times to repeat GIF
  # If value is -1, play once
  # If value is 0, loop indefinitely
  # If value is a positive number, loop n times
  repeat: 0
  
  # Quality
  # 1 - 100
  quality: 100
  
  # Delay between frames in ms
  # If the value is `auto` use the actual recording delays
  frameDelay: auto
  
  # Maximum delay between frames in ms
  # Ignored if the `frameDelay` isn't set to `auto`
  # Set to `auto` to prevent limiting the max idle time
  maxIdleTime: 2000
  
  # The surrounding frame box
  # The `type` can be null, window, floating, or solid`
  # To hide the title use the value null
  # Don't forget to add a backgroundColor style with a null as type
  frameBox:
    type: floating
    title: Terminalizer
    style:
      border: 0px black solid
      # boxShadow: none
      # margin: 0px
  
  # Add a watermark image to the rendered gif
  # You need to specify an absolute path for
  # the image on your machine or a URL, and you can also
  # add your own CSS styles
  watermark:
    imagePath: null
    style:
      position: absolute
      right: 15px
      bottom: 15px
      width: 100px
      opacity: 0.9
  
  # Cursor style can be one of
  # `block`, `underline`, or `bar`
  cursorStyle: block
  
  # Font family
  # You can use any font that is installed on your machine
  # in CSS-like syntax
  fontFamily: "Monaco, Lucida Console, Ubuntu Mono, Monospace"
  
  # The size of the font
  fontSize: 12
  
  # The height of lines
  lineHeight: 1
  
  # The spacing between letters
  letterSpacing: 0
  
  # Theme
  theme:
    background: "transparent"
    foreground: "#afafaf"
    cursor: "#c7c7c7"
    black: "#232628"
    red: "#fc4384"
    green: "#b3e33b"
    yellow: "#ffa727"
    blue: "#75dff2"
    magenta: "#ae89fe"
    cyan: "#708387"
    white: "#d5d5d0"
    brightBlack: "#626566"
    brightRed: "#ff7fac"
    brightGreen: "#c8ed71"
    brightYellow: "#ebdf86"
    brightBlue: "#75dff2"
    brightMagenta: "#ae89fe"
    brightCyan: "#b1c6ca"
    brightWhite: "#f9f9f4"
  
# Records, feel free to edit them
records:
  - delay: 264
    content: "\e[36mroot\e[m@\e[32mmpc:\e[33;1m/tmp\e[m$ "
  - delay: 3894
    content: >-
      export
      MY_PG_DB='postgresql://postgres:postgres@pgmachine:5432/postgres'
  - delay: 1551
    content: "\r\n\e[36mroot\e[m@\e[32mmpc:\e[33;1m/tmp\e[m$ "
  - delay: 4540
    content: sling run --src-conn MY_PG_DB --src-stream public.
  - delay: 5
    content: ccompare_price_day --stdout > my_file.csv
  - delay: 2109
    content: "\r\n"
  - delay: 218
    content: "\e[90m1:25PM\e[0m \e[32mINF\e[0m connecting to source database (postgres)\r\n"
  - delay: 10
    content: "\e[90m1:25PM\e[0m \e[32mINF\e[0m reading from source database\r\n"
  - delay: 256
    content: "\e[90m1:25PM\e[0m \e[32mINF\e[0m writing to target file system\r\n"
  - delay: 1597
    content: "\r1s 38,145 ? p/s                         "
  - delay: 999
    content: "\r2s 119,708 81572 r/s                    "
  - delay: 1000
    content: "\r3s 201,678 81597 r/s                    "
  - delay: 1001
    content: "\r4s 281,854 81506 r/s                    "
  - delay: 999
    content: "\r5s 362,323 81440 r/s                    "
  - delay: 1000
    content: "\r6s 439,973 81194 r/s                    "
  - delay: 182
    content: "\r6s 519,812 100317 r/s                   \r\n\e[90m1:26PM\e[0m \e[32mINF\e[0m wrote 535201 rows [74,751 r/s]\r\n\e[90m1:26PM\e[0m \e[32mINF\e[0m execution succeeded\r\n"
  - delay: 662
    content: "\e[36mroot\e[m@\e[32mmpc:\e[33;1m/tmp\e[m$ "
  - delay: 4142
    content: "\r\n\e[36mroot\e[m@\e[32mmpc:\e[33;1m/tmp\e[m$ "
  - delay: 671
    content: gzip my_file.csv
  - delay: 668
    content: "\r\n"
  - delay: 585
    content: "\e[36mroot\e[m@\e[32mmpc:\e[33;1m/tmp\e[m$ "
  - delay: 4727
    content: cat my_file.csv.gz | sling run --tgt-conn MY_PG_DB
  - delay: 5
    content: ' --tgt-object public.my_table --mode full-refresh'
  - delay: 2516
    content: "\r\n"
  - delay: 204
    content: "\e[90m1:26PM\e[0m \e[32mINF\e[0m connecting to target database (postgres)\r\n"
  - delay: 11
    content: "\e[90m1:26PM\e[0m \e[32mINF\e[0m reading from stream (stdin)\r\n"
  - delay: 118
    content: "\e[90m1:26PM\e[0m \e[32mINF\e[0m writing to target database [mode: full-refresh]\r\n"
  - delay: 273
    content: "\e[90m1:26PM\e[0m \e[32mINF\e[0m streaming data\r\n"
  - delay: 1467
    content: "\r\e[33m1s\e[0m 14,746 \e[32m? p/s\e[0m \e[34m\e[0m                        "
  - delay: 1000
    content: "\r\e[33m2s\e[0m 103,777 \e[32m89034 r/s\e[0m \e[34m\e[0m                   "
  - delay: 999
    content: "\r\e[33m3s\e[0m 214,645 \e[32m90442 r/s\e[0m \e[34m\e[0m                   "
  - delay: 1000
    content: "\r\e[33m4s\e[0m 326,678 \e[32m91835 r/s\e[0m \e[34m\e[0m                   "
  - delay: 881
    content: "\r\e[33m5s\e[0m 438,371 \e[32m112951 r/s\e[0m \e[34m\e[0m                  \r\n"
  - delay: 199
    content: "\e[90m1:26PM\e[0m \e[32mINF\e[0m dropped table public.my_table\r\n"
  - delay: 60
    content: "\e[90m1:26PM\e[0m \e[32mINF\e[0m created table public.my_table\r\n"
  - delay: 1701
    content: "\e[90m1:26PM\e[0m \e[32mINF\e[0m inserted 535201 rows in 7 secs [68,379 r/s]\r\n"
  - delay: 15
    content: "\e[90m1:26PM\e[0m \e[32mINF\e[0m execution succeeded\r\n"
  - delay: 644
    content: "\e[36mroot\e[m@\e[32mmpc:\e[33;1m/tmp\e[m$ "
