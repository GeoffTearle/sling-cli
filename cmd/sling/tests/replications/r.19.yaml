source: aws_s3
target: postgres

env:
  SLING_STATE: aws_s3/sling-state/test/r.19
  RESET: ${RESET}

defaults:
  hooks:
    start:
      - type: log
        message: 'runtime_state => {runtime_state}'
        
      - type: delete
        if: env.RESET == "true"
        connection: aws_s3
        path: sling-state/test/r.19 # delete state on replication start

      - type: inspect
        id: inspect_file
        location: aws_s3/test/public_test1k_postgres_pg_parquet
        message: 'runtime_state ==> {runtime_state}'

      # test check, should fail and warn
      - type: check
        id: inspect_file_check
        check: hooks.inspect_file.is_dir != true
        on_failure: warn

      - type: query
        connection: postgres
        if: env.RESET == "true"
        query: 'drop table public.test1k_postgres_pg_parquet'
    
    end:

      - type: log
        message: |
          inspect-output ==> {hooks.inspect_file}

          runtime_state ==> {runtime_state}

      - type: copy
        id: file-copy
        from: aws_s3/sling-state/test/r.19
        to: local//tmp/test/sling-state/test/r.19

      - type: check
        check: hooks["file-copy"].bytes_written > 0
        on_failure: warn

streams:
  test/public_test1k_postgres_pg_parquet/{part_year}/{part_month}/:
    id: test1k_postgres_pg_parquet
    object: public.test1k_postgres_pg_parquet
    mode: incremental
    primary_key: [id]
    update_key: update_dt
    source_options:
      format: parquet
    hooks:
      post:
        - type: log
          message: |
            run-output ==> {run}
      