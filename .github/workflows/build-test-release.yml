name: Build & Test

on: [push]

jobs:
  build-sling:
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: |
          bash scripts/prep.gomod.sh
          export WORK_FOLDER=/__/work/${GITHUB_RUN_NUMBER}
          mkdir -p $WORK_FOLDER
          cp -r . $WORK_FOLDER/sling
          mkdir $WORK_FOLDER/sling/python/sling/bin
          chmod -R 777 $WORK_FOLDER/sling
          docker run --rm -v /__/docker-data/devbox/root/go:/root/go -v /__:/__ -v $WORK_FOLDER:/work --workdir /work/sling flarco/devbox:base bash scripts/build.linux.sh
          /bin/cp -f $WORK_FOLDER/sling/python/sling/bin/sling-linux /__/bin/sling
          chmod 777 /__/bin/sling
          rm -rf $WORK_FOLDER

  test:
    if: "! contains(github.event.head_commit.message, '[skip ci]')"

    needs: [build-sling]

    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v2

      - name: Run Go Tests
        run: |
          bash scripts/prep.gomod.sh
          source /root/.bashrc
          source /__/devbox/.env.sh
          export _DEBUG=''
          echo $PATH
          bash scripts/test.sh

  push:
    needs: [build-sling, test]
    runs-on: self-hosted

    steps:
      - name: Push Docker
        run: |
          VERSION=$(/__/bin/sling --version | sed 's/Version: //')
          /bin/cp /__/bin/sling .

          source /__/devbox/.env.sh
          export _DEBUG=''
          echo "$DOCKER_PASSWORD!" | docker login -u slingdata --password-stdin

          docker build -t slingdata/sling:$VERSION -f cmd/sling/Dockerfile .
          docker tag slingdata/sling:$VERSION slingdata/sling:latest
          docker push slingdata/sling:latest
          docker image rm -f slingdata/sling:$VERSION

          rm -rf webapp

  release:
    needs: [build-sling, test]
    runs-on: ${{ matrix.os }}
    # if: github.event.pull_request.merged

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-2016]

    steps:
      - uses: actions/checkout@v2

      - name: Dump context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: |
          echo "JOB_CONTEXT -> $JOB_CONTEXT"
          echo "MATRIX_CONTEXT -> $MATRIX_CONTEXT"
          echo "RUNNER_CONTEXT -> $RUNNER_CONTEXT"

      - name: Set up GoLang
        uses: actions/setup-go@v1
        with:
          go-version: "1.16"

      - name: Prepare Build (Unix)
        if: runner.os != 'windows'
        run: |
          export GO_BIN_FOLDER=$HOME/go/bin
          export TMPDIR=~/tmp/
          export PATH=$GO_BIN_FOLDER:$PATH
          mkdir -p $TMPDIR

      - name: Prepare Build (Windows)
        if: runner.os == 'windows'
        run: |
          setx TMPDIR "C:\Users\runneradmin\tmp"
          setx PATH "%PATH%;C:\Users\runneradmin\go\bin"
          setx GO111MODULE "auto"
          mkdir C:\Users\runneradmin\tmp

      - name: Build Sling (Linux)
        if: runner.os == 'linux'
        run: |
          echo "Building sling-linux"
          bash scripts/prep.gomod.sh
          GOOS=linux GOARCH=amd64 go build -o sling-linux cmd/sling/*.go

      - name: Build Sling (Mac)
        if: runner.os == 'macOS'
        run: |
          echo "Building sling-mac"
          bash scripts/prep.gomod.sh
          GOOS=darwin GOARCH=amd64 go build -o sling-mac cmd/sling/*.go

      - name: Build Sling (Windows)
        if: runner.os == 'windows'
        run: |
          echo "Building sling-win.exe"
          setx GOOS "windows"
          setx GOARCH "386"
          setx GO111MODULE "auto"

          go mod edit -dropreplace='github.com/flarco/g' go.mod
          go mod edit -dropreplace='github.com/flarco/dbio' go.mod
          go get github.com/flarco/g@HEAD
          go get github.com/flarco/dbio@HEAD

          go build -o sling-win.exe github.com/flarco/sling/cmd/sling

      - name: Release Binaries to Github
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest-${{ runner.os }}"
          prerelease: true
          title: "Latest: ${{ runner.os }}"
          files: |
            sling*
      
      - uses: actions/upload-artifact@v2
        with:
          name: sling-dist
          path: sling*

  release-python:
    needs: [release]
    runs-on: self-hosted

    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
        
      - uses: actions/download-artifact@v2
        with:
          name: sling-dist
      
      - name: Upload to PyPi
        run: |
          source /__/devbox/.env.sh
          mkdir python/sling/bin/

          mv -f sling-mac python/sling/bin/
          mv -f sling-linux python/sling/bin/
          mv -f sling-win.exe python/sling/bin/
          chmod -R 755 python/sling/bin/

          cd python
          pip install -e .
          pip install twine
          python setup.py sdist && twine upload --verbose --skip-existing dist/*