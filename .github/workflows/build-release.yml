name: Build & Release

on: [workflow_dispatch]

jobs:
  build:
    runs-on: [self-hosted, linux]

    outputs:
      version: ${{ steps.step1.outputs.version }}

    steps:
      - uses: actions/checkout@v2
        
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - id: step1
        name: Build
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          bash scripts/prep.gomod.sh
          export WORK_FOLDER=/__/work/${GITHUB_RUN_NUMBER}
          mkdir -p $WORK_FOLDER
          cp -r . $WORK_FOLDER/sling
          docker run --rm -e VERSION -v /__/docker-data/devbox/root/go:/root/go -v /__:/__ -v /tmp:/tmp -v $WORK_FOLDER:/work --workdir /work/sling flarco/devbox:base bash scripts/build.linux.sh
          rm -rf $WORK_FOLDER

          echo $VERSION
          VERSION=$(/tmp/sling-linux --version | sed 's/Version: //')
          echo ::set-output name=version::$VERSION

  push:
    needs: [build]
    runs-on: [self-hosted, Linux]
    
    steps:
      - name: Push Docker
        run: |
          /bin/cp /tmp/sling-linux ./sling
          VERSION=$(./sling --version | sed 's/Version: //')

          source /__/devbox/.env.sh
          export _DEBUG=''
          echo "$DOCKER_PASSWORD" | docker login -u flarco --password-stdin

          docker build -t flarco/sling:$VERSION -f cmd/sling/Dockerfile .
          docker tag flarco/sling:$VERSION flarco/sling:latest
          docker push flarco/sling:$VERSION
          docker push flarco/sling:latest
          docker image rm -f flarco/sling:$VERSION

  release:
    needs: [build]
    runs-on: ${{ matrix.runner }}

    strategy:
      fail-fast: true
      matrix:
        # runner: [self-hosted-mac, self-hosted-linux, self-hosted-windows]
        runner: [macos-latest, ubuntu-18.04, windows-latest]

    # doesn't work, put double quote at the end
    # env:
    #   VERSION: ${{ needs.build.outputs.version }}"

    steps:
      - uses: actions/checkout@v2

      - name: Dump context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: |
          echo "JOB_CONTEXT -> $JOB_CONTEXT"
          echo "MATRIX_CONTEXT -> $MATRIX_CONTEXT"
          echo "RUNNER_CONTEXT -> $RUNNER_CONTEXT"
          echo "VERSION -> $VERSION"

      - name: Set up GoLang
        uses: actions/setup-go@v1
        with:
          go-version: "1.18"
          
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build Sling (Linux)
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        if: runner.os == 'linux'
        run: bash scripts/ci/build.linux.sh

      - name: Build Sling (Mac)
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        if: runner.os == 'macOS'
        run: bash scripts/ci/build.mac.sh

      - name: Build Sling (Windows)
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        if: runner.os == 'windows'
        run: .\scripts\ci\build.win.ps1

      # - name: Release Binaries to Github
      #   uses: "marvinpinto/action-automatic-releases@latest"
      #   with:
      #     repo_token: "${{ secrets.GITHUB_TOKEN }}"
      #     automatic_release_tag: "latest-${{ runner.os }}"
      #     prerelease: true
      #     title: "Latest: ${{ runner.os }}"
      #     files: |
      #       sling*
      
      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_SPACE_ACCESS_KEY}}
          secret_key: ${{ secrets.DO_SPACE_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: dist
          out_dir: slingdata.io/dist

  release-python:
    needs: [release]
    runs-on: ubuntu-latest

    steps:
      - name: Trigger Upload to PyPi
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: slingdata-io/sling-python
          event-type: release-python
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'