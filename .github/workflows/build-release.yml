name: Build & Release

on: [workflow_dispatch]

jobs:
  build:
    runs-on: [self-hosted, linux]

    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: |
          bash scripts/prep.gomod.sh
          export WORK_FOLDER=/__/work/${GITHUB_RUN_NUMBER}
          mkdir -p $WORK_FOLDER
          cp -r . $WORK_FOLDER/sling
          docker run --rm -v /__/docker-data/devbox/root/go:/root/go -v /__:/__ -v /tmp:/tmp -v $WORK_FOLDER:/work --workdir /work/sling flarco/devbox:base bash scripts/build.linux.sh
          rm -rf $WORK_FOLDER

  push:
    needs: [build]
    runs-on: [self-hosted, Linux]

    outputs:
      version: ${{ steps.step1.outputs.version }}

    steps:
      - id: step1
        name: Push Docker
        run: |
          /bin/cp /tmp/sling-linux ./sling

          VERSION=$(./sling --version | sed 's/Version: //')
          echo "::set-output name=version::$VERSION"

          source /__/devbox/.env.sh
          export _DEBUG=''
          echo "$DOCKER_PASSWORD" | docker login -u flarco --password-stdin

          docker build -t flarco/sling:$VERSION -f cmd/sling/Dockerfile .
          docker tag flarco/sling:$VERSION flarco/sling:latest
          docker push flarco/sling:$VERSION
          docker push flarco/sling:latest
          docker image rm -f flarco/sling:$VERSION

  release:
    needs: [build]
    runs-on: ${{ matrix.runner }}

    strategy:
      matrix:
        runner: [macos-latest, ubuntu-latest, self-hosted-windows]

    env:
      VERSION: ${{ needs.push.outputs.version }}"

    steps:
      - uses: actions/checkout@v2

      - name: Dump context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: |
          echo "JOB_CONTEXT -> $JOB_CONTEXT"
          echo "MATRIX_CONTEXT -> $MATRIX_CONTEXT"
          echo "RUNNER_CONTEXT -> $RUNNER_CONTEXT"
          echo "VERSION -> $VERSION"

      - name: Set up GoLang
        uses: actions/setup-go@v1
        with:
          go-version: "1.18"

      - name: Prepare Build (Unix)
        if: runner.os != 'windows'
        run: |
          export GO_BIN_FOLDER=$HOME/go/bin
          export TMPDIR=~/tmp/
          export PATH=$GO_BIN_FOLDER:$PATH
          mkdir -p $TMPDIR
          mkdir -p dist/$VERSION

      - name: Prepare Build (Windows)
        if: runner.os == 'windows'
        run: |
          setx TMPDIR "C:\Users\runneradmin\tmp"
          setx PATH "%PATH%;C:\Users\runneradmin\go\bin"
          setx GO111MODULE "auto"
          mkdir C:\Users\runneradmin\tmp
          mkdir dist
          mkdir dist\$env:VERSION

      - name: Build Sling (Linux)
        if: runner.os == 'linux'
        run: |
          echo "Building sling-linux"
          bash scripts/prep.gomod.sh
          GOOS=linux GOARCH=amd64 go build -o sling-linux cmd/sling/*.go

          cp sling-linux dist\
          cp sling-linux dist\$VERSION

      - name: Build Sling (Mac)
        if: runner.os == 'macOS'
        run: |
          echo "Building sling-mac"
          bash scripts/prep.gomod.sh
          GOOS=darwin GOARCH=amd64 go build -o sling-mac cmd/sling/*.go

          cp sling-mac dist\
          cp sling-mac dist\$VERSION

      - name: Build Sling (Windows)
        if: runner.os == 'windows'
        run: |
          echo "Building sling-win.exe"
          setx GOOS "windows"
          setx GOARCH "386"
          setx GO111MODULE "auto"

          go mod edit -dropreplace='github.com/flarco/g' go.mod
          go mod edit -dropreplace='github.com/flarco/dbio' go.mod
          go get github.com/flarco/g@HEAD
          go get github.com/flarco/dbio@HEAD

          go build -o sling-win.exe github.com/slingdata-io/sling-cli/cmd/sling

          copy sling-win.exe dist\
          copy sling-win.exe dist\$env:VERSION


      - name: Release Binaries to Github
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest-${{ runner.os }}"
          prerelease: true
          title: "Latest: ${{ runner.os }}"
          files: |
            sling*
      
      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_SPACE_ACCESS_KEY}}
          secret_key: ${{ secrets.DO_SPACE_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: dist
          out_dir: slingdata.io/dist

  release-python:
    needs: [release]
    runs-on: ubuntu-latest

    steps:
      - name: Trigger Upload to PyPi
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: slingdata-io/sling-python
          event-type: release-python
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'