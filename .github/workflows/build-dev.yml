name: Build Dev

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - main

env:
  GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACE_ACCESS_KEY}}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACE_SECRET_KEY}}
  PLAUSIBLE_URL: ${{ secrets.PLAUSIBLE_URL }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  GOPRIVATE: github.com/slingdata-io/*

jobs:
  build:
    runs-on: [self-hosted, linux, ubuntu-16]
    timeout-minutes: 5

    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up GoLang
        uses: actions/setup-go@v3
        with:
          go-version: "1.22"
          cache: false
        
      - name: Get the version
        id: get_version
        run: |
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          VERSION="$BRANCH_NAME.dev"
          echo "VERSION -> $VERSION"
          echo ::set-output name=VERSION::$VERSION

      - id: step1
        name: Build
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          bash scripts/build.sh
          echo ::set-output name=version::$VERSION
  
  release:
    if: "! (contains(github.event.inputs.build_only, 'true'))"
    needs: [build]
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 20

    strategy:
      fail-fast: true
      matrix:
        # runner: [self-hosted-mac, self-hosted-linux, self-hosted-windows]
        # runner: [macos-latest, ubuntu-20.04, windows-latest]
        runner: [self-hosted-mac, ubuntu-16, self-hosted-windows]

    steps:
      - uses: actions/checkout@v3

      - name: Dump context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: |
          echo "JOB_CONTEXT -> $JOB_CONTEXT"
          echo "MATRIX_CONTEXT -> $MATRIX_CONTEXT"
          echo "RUNNER_CONTEXT -> $RUNNER_CONTEXT"
          echo "VERSION -> $VERSION"
      - name: Set up GoLang
        uses: actions/setup-go@v3
        with:
          go-version: "1.22"
          cache: false

      - name: Configure private token (Mac)
        if: runner.os == 'macOS'
        run: |
          git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
        
      - name: Configure private token (Linux)
        if: runner.os == 'linux'
        run: |
          git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
        
      - name: Configure private token (Windows)
        if: runner.os == 'windows'
        run: |
          $url = ("https://" + $env:GITHUB_TOKEN + ":x-oauth-basic@github.com/")
          git config --global url."$url".insteadOf "https://github.com/"
      
      - name: Build Sling (Linux)
        env:
          VERSION: ${{ needs.build.outputs.VERSION }}
        if: runner.os == 'linux'
        run: bash scripts/ci/build.linux.sh $VERSION

      - name: Build Sling (Mac)
        env:
          VERSION: ${{ needs.build.outputs.VERSION }}
        if: runner.os == 'macOS'
        run: bash scripts/ci/build.mac.sh $VERSION


      - name: Configure Pagefile (Windows)
        if: runner.os == 'windows'
        uses: al-cheb/configure-pagefile-action@v1.2
        with:
            minimum-size: 16GB
            maximum-size: 16GB
            disk-root: "C:"

      - name: Build Sling (Windows)
        env:
          VERSION: ${{ needs.build.outputs.VERSION }}
        if: runner.os == 'windows'
        run: .\scripts\ci\build.win.ps1 $env:VERSION

      - name: Set up MinIO Client (Windows)
        if: runner.os == 'windows'
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          wget "https://dl.min.io/client/mc/release/windows-amd64/mc.exe" -OutFile mc.exe
          $currentDirPath = $(Get-Location).Path
          $env:GITHUB_PATH="$env:GITHUB_PATH;$currentDirPath"

      - name: Set up MinIO Client (Unix)
        if: runner.os != 'windows'
        run: |
          name=$(uname -s | tr "[:upper:]" "[:lower:]")
          wget "https://dl.min.io/client/mc/release/$name-amd64/mc" && chmod +x mc
          echo "$PWD" >> $GITHUB_PATH
      
      - name: Upload to R2
        run: |
          mc cp "*.tar.gz" R2/sling-public/dev/latest/ 